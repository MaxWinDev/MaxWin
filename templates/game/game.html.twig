{#{% extends 'base.html.twig' %}#}
{#{% block stylesheets %}#}
{#    <link rel="stylesheet" href="{{ asset('css/game.css') }}" type="text/css">#}
{#    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />#}
{#{% endblock %}#}

{#{% block javascripts %}#}
{#    <script src="{{ asset('js/game.js') }}"></script>#}
{#{% endblock %}#}

{#{% block title %}#}
{#    Casino Game#}
{#{% endblock %}#}

{#{% block body %}#}
{#    <div class="background-image"></div>#}
{#    <div class="content">#}
{#        <div class="game-container">#}
{#            <div class="grid">#}
{#                {% for col in 0..4 %}#}
{#                    <div class="column">#}
{#                        {% for row in 0..20 %}#}
{#                            <div class="grid-item">#}
{#                                {% set randomIndex = random(0, gridImages|length - 1) %}#}
{#                                <img src="{{ asset('../assets/images/' ~ gridImages[randomIndex]) }}" alt="Casino Image">#}
{#                            </div>#}
{#                        {% endfor %}#}
{#                    </div>#}
{#                {% endfor %}#}
{#            </div>#}
{#        </div>#}
{#        <div class="spin-container">#}
{#            <button class="auto-spin-button">#}
{#                <span class="material-symbols-outlined">#}
{#                    hdr_auto#}
{#                </span>#}
{#            </button>#}
{#            <button id="spin-button" class="spin-button">#}
{#                <span class="material-symbols-outlined">#}
{#                    autorenew#}
{#                </span>#}
{#            </button>#}
{#            <button class="fast-spin-button">#}
{#                <span class="material-symbols-outlined">#}
{#                    offline_bolt#}
{#                </span>#}
{#            </button>#}
{#        </div>#}
{#    </div>#}
{#{% endblock %}#}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Casino</title>
    <style>
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
        #spin {
            display: block;
            margin: 20px auto;
        }
    </style>
</head>
<body>
<canvas id="casinoCanvas" width="500" height="300"></canvas>
<button id="spin">Spin</button>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const canvas = document.getElementById('casinoCanvas');
        const ctx = canvas.getContext('2d');
        const cols = 5;
        const rows = 3;
        const colWidth = canvas.width / cols;
        const rowHeight = canvas.height / rows;
        const symbols = [
            '../assets/images/cerise.png',
            '../assets/images/citron.png',
            '../assets/images/pasteque.png',
            '../assets/images/gold.png',
            '../assets/images/7.png',
            '../assets/images/max.png',
            '../assets/images/prune.png',
            '../assets/images/fraise.png',
        ];
        const images = [];
        const spinSpeed = 0.2; // Vitesse de rotation constante pour chaque spin
        const stopSpeed = 0.00001; // Vitesse à laquelle les colonnes s'arrêtent
        const stopDelay = 1000; // Délai d'arrêt pour chaque colonne
        const columnDelay = 200; // Délai initial pour chaque colonne
        let positions = Array.from({ length: cols }, () => Math.floor(Math.random() * symbols.length));
        let speeds = Array(cols).fill(0);
        let spinning = Array(cols).fill(false);

        function loadImages(callback) {
            let loadedImages = 0;
            for (let i = 0; i < symbols.length; i++) {
                images[i] = new Image();
                images[i].src = symbols[i];
                images[i].onload = () => {
                    loadedImages++;
                    if (loadedImages === symbols.length) {
                        callback();
                    }
                };
            }
        }

        function drawGrid() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (let col = 0; col < cols; col++) {
                for (let row = 0; row < rows + 2; row++) { // Dessine une rangée supplémentaire pour un défilement plus fluide
                    const yPos = (positions[col] + row) % symbols.length;
                    const imgIndex = Math.floor(yPos) % symbols.length;
                    const img = images[imgIndex];
                    const yOffset = (positions[col] % 1) * rowHeight;
                    ctx.drawImage(img, col * colWidth, canvas.height - (row + 1) * rowHeight + yOffset, colWidth, rowHeight);
                }
            }
            // Dessine les séparateurs de colonnes
            for (let col = 1; col < cols; col++) {
                ctx.beginPath();
                ctx.moveTo(col * colWidth, 0);
                ctx.lineTo(col * colWidth, canvas.height);
                ctx.stroke();
            }
        }

        async function spinColumns() {
            return new Promise(resolve => {
                let animationID;
                let stopColumn = 0;

                function animate() {
                    if (stopColumn >= cols) {
                        cancelAnimationFrame(animationID);
                        resolve();
                        return;
                    }
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    for (let col = 0; col < cols; col++) {
                        for (let row = 0; row < rows + 2; row++) { // Dessine une rangée supplémentaire pour un défilement plus fluide
                            const yPos = (positions[col] + row) % symbols.length;
                            const imgIndex = Math.floor(yPos) % symbols.length;
                            const img = images[imgIndex];
                            const yOffset = (positions[col] % 1) * rowHeight;
                            ctx.drawImage(img, col * colWidth, canvas.height - (row + 1) * rowHeight + yOffset, colWidth, rowHeight);
                        }
                        if (!spinning[col] && stopColumn === col) {
                            stopColumn++;
                            continue;
                        }
                        positions[col] += speeds[col];
                        if (speeds[col] > stopSpeed) { // Gradually slow down
                            speeds[col] -= 0.001; // Deceleration factor
                        } else {
                            if (positions[col] % 1 !== 0) { // Align position to stop exactly at a symbol
                                positions[col] = Math.round(positions[col]);
                            }
                            speeds[col] = 0;
                            spinning[col] = false;
                        }
                    }
                    // Dessine les séparateurs de colonnes
                    for (let col = 1; col < cols; col++) {
                        ctx.beginPath();
                        ctx.moveTo(col * colWidth, 0);
                        ctx.lineTo(col * colWidth, canvas.height);
                        ctx.stroke();
                    }
                    animationID = requestAnimationFrame(animate);
                }

                function startNextColumn(col) {
                    return new Promise(resolve => {
                        setTimeout(() => {
                            speeds[col] = spinSpeed; // Vitesse de rotation constante pour chaque colonne
                            spinning[col] = true;
                            animate();
                            resolve();
                        }, col * columnDelay);
                    });
                }

                for (let col = 0; col < cols; col++) {
                    startNextColumn(col);
                }
            });
        }

        document.getElementById('spin').addEventListener('click', async () => {
            if (spinning.some(s => s)) return; // Empêche plusieurs spins

            await spinColumns();
        });

        loadImages(drawGrid);
    });
</script>

</body>
</html>





{#const symbols = [#}
{#'../assets/images/cerise.png',#}
{#'../assets/images/citron.png',#}
{#'../assets/images/pasteque.png',#}
{#'../assets/images/gold.png',#}
{#'../assets/images/7.png',#}
{#'../assets/images/max.png',#}
{#'../assets/images/prune.png',#}
{#'../assets/images/fraise.png',];#}